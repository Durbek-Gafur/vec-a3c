// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	store "vec-node/internal/store"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CompleteWorkflow mocks base method.
func (m *MockStore) CompleteWorkflow(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteWorkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteWorkflow indicates an expected call of CompleteWorkflow.
func (mr *MockStoreMockRecorder) CompleteWorkflow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteWorkflow", reflect.TypeOf((*MockStore)(nil).CompleteWorkflow), ctx, id)
}

// GetQueueSize mocks base method.
func (m *MockStore) GetQueueSize(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueSize", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueSize indicates an expected call of GetQueueSize.
func (mr *MockStoreMockRecorder) GetQueueSize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueSize", reflect.TypeOf((*MockStore)(nil).GetQueueSize), ctx)
}

// GetWorkflowByID mocks base method.
func (m *MockStore) GetWorkflowByID(ctx context.Context, id int64) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByID", ctx, id)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowByID indicates an expected call of GetWorkflowByID.
func (mr *MockStoreMockRecorder) GetWorkflowByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByID", reflect.TypeOf((*MockStore)(nil).GetWorkflowByID), ctx, id)
}

// GetWorkflows mocks base method.
func (m *MockStore) GetWorkflows(ctx context.Context, filter *store.WorkflowFilter) ([]store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", ctx, filter)
	ret0, _ := ret[0].([]store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockStoreMockRecorder) GetWorkflows(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockStore)(nil).GetWorkflows), ctx, filter)
}

// SaveWorkflow mocks base method.
func (m *MockStore) SaveWorkflow(ctx context.Context, workflow *store.Workflow) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWorkflow", ctx, workflow)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveWorkflow indicates an expected call of SaveWorkflow.
func (mr *MockStoreMockRecorder) SaveWorkflow(ctx, workflow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWorkflow", reflect.TypeOf((*MockStore)(nil).SaveWorkflow), ctx, workflow)
}

// SetQueueSize mocks base method.
func (m *MockStore) SetQueueSize(ctx context.Context, size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQueueSize", ctx, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueueSize indicates an expected call of SetQueueSize.
func (mr *MockStoreMockRecorder) SetQueueSize(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueSize", reflect.TypeOf((*MockStore)(nil).SetQueueSize), ctx, size)
}

// StartWorkflow mocks base method.
func (m *MockStore) StartWorkflow(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWorkflow indicates an expected call of StartWorkflow.
func (mr *MockStoreMockRecorder) StartWorkflow(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockStore)(nil).StartWorkflow), ctx, id)
}

// UpdateQueueSize mocks base method.
func (m *MockStore) UpdateQueueSize(ctx context.Context, size int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueSize", ctx, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQueueSize indicates an expected call of UpdateQueueSize.
func (mr *MockStoreMockRecorder) UpdateQueueSize(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueSize", reflect.TypeOf((*MockStore)(nil).UpdateQueueSize), ctx, size)
}

// UpdateWorkflow mocks base method.
func (m *MockStore) UpdateWorkflow(ctx context.Context, w *store.Workflow) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", ctx, w)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockStoreMockRecorder) UpdateWorkflow(ctx, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockStore)(nil).UpdateWorkflow), ctx, w)
}
