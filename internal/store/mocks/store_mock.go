// Code generated by MockGen. DO NOT EDIT.
// Source: vec-node/internal/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	store "vec-node/internal/store"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CompleteWorkflow mocks base method.
func (m *MockStore) CompleteWorkflow(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteWorkflow indicates an expected call of CompleteWorkflow.
func (mr *MockStoreMockRecorder) CompleteWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteWorkflow", reflect.TypeOf((*MockStore)(nil).CompleteWorkflow), arg0, arg1)
}

// CompleteWorkflowInQueue mocks base method.
func (m *MockStore) CompleteWorkflowInQueue(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteWorkflowInQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteWorkflowInQueue indicates an expected call of CompleteWorkflowInQueue.
func (mr *MockStoreMockRecorder) CompleteWorkflowInQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteWorkflowInQueue", reflect.TypeOf((*MockStore)(nil).CompleteWorkflowInQueue), arg0, arg1)
}

// Dequeue mocks base method.
func (m *MockStore) Dequeue(arg0 context.Context) (*store.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", arg0)
	ret0, _ := ret[0].(*store.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockStoreMockRecorder) Dequeue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockStore)(nil).Dequeue), arg0)
}

// Enqueue mocks base method.
func (m *MockStore) Enqueue(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockStoreMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockStore)(nil).Enqueue), arg0, arg1)
}

// GetQueueSize mocks base method.
func (m *MockStore) GetQueueSize(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueSize indicates an expected call of GetQueueSize.
func (mr *MockStoreMockRecorder) GetQueueSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueSize", reflect.TypeOf((*MockStore)(nil).GetQueueSize), arg0)
}

// GetQueueStatus mocks base method.
func (m *MockStore) GetQueueStatus(arg0 context.Context) ([]store.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueStatus", arg0)
	ret0, _ := ret[0].([]store.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueStatus indicates an expected call of GetQueueStatus.
func (mr *MockStoreMockRecorder) GetQueueStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueStatus", reflect.TypeOf((*MockStore)(nil).GetQueueStatus), arg0)
}

// GetWorkflowByID mocks base method.
func (m *MockStore) GetWorkflowByID(arg0 context.Context, arg1 int) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByID", arg0, arg1)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowByID indicates an expected call of GetWorkflowByID.
func (mr *MockStoreMockRecorder) GetWorkflowByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByID", reflect.TypeOf((*MockStore)(nil).GetWorkflowByID), arg0, arg1)
}

// GetWorkflows mocks base method.
func (m *MockStore) GetWorkflows(arg0 context.Context, arg1 *store.WorkflowFilter) ([]store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", arg0, arg1)
	ret0, _ := ret[0].([]store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockStoreMockRecorder) GetWorkflows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockStore)(nil).GetWorkflows), arg0, arg1)
}

// IsSpaceAvailable mocks base method.
func (m *MockStore) IsSpaceAvailable(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpaceAvailable", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSpaceAvailable indicates an expected call of IsSpaceAvailable.
func (mr *MockStoreMockRecorder) IsSpaceAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpaceAvailable", reflect.TypeOf((*MockStore)(nil).IsSpaceAvailable), arg0)
}

// ProcessWorkflowInQueue mocks base method.
func (m *MockStore) ProcessWorkflowInQueue(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessWorkflowInQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessWorkflowInQueue indicates an expected call of ProcessWorkflowInQueue.
func (mr *MockStoreMockRecorder) ProcessWorkflowInQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessWorkflowInQueue", reflect.TypeOf((*MockStore)(nil).ProcessWorkflowInQueue), arg0, arg1)
}

// SaveWorkflow mocks base method.
func (m *MockStore) SaveWorkflow(arg0 context.Context, arg1 *store.Workflow) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveWorkflow indicates an expected call of SaveWorkflow.
func (mr *MockStoreMockRecorder) SaveWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWorkflow", reflect.TypeOf((*MockStore)(nil).SaveWorkflow), arg0, arg1)
}

// SetQueueSize mocks base method.
func (m *MockStore) SetQueueSize(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQueueSize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueueSize indicates an expected call of SetQueueSize.
func (mr *MockStoreMockRecorder) SetQueueSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueSize", reflect.TypeOf((*MockStore)(nil).SetQueueSize), arg0, arg1)
}

// StartWorkflow mocks base method.
func (m *MockStore) StartWorkflow(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWorkflow indicates an expected call of StartWorkflow.
func (mr *MockStoreMockRecorder) StartWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflow", reflect.TypeOf((*MockStore)(nil).StartWorkflow), arg0, arg1)
}

// UpdateQueueSize mocks base method.
func (m *MockStore) UpdateQueueSize(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueSize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQueueSize indicates an expected call of UpdateQueueSize.
func (mr *MockStoreMockRecorder) UpdateQueueSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueSize", reflect.TypeOf((*MockStore)(nil).UpdateQueueSize), arg0, arg1)
}

// UpdateWorkflow mocks base method.
func (m *MockStore) UpdateWorkflow(arg0 context.Context, arg1 *store.Workflow) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockStoreMockRecorder) UpdateWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockStore)(nil).UpdateWorkflow), arg0, arg1)
}
