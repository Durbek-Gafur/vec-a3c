// Code generated by MockGen. DO NOT EDIT.
// Source: vec-node/internal/workflow (interfaces: Workflow)

// Package workflow_mock is a generated GoMock package.
package workflow_mock

import (
	context "context"
	reflect "reflect"
	store "vec-node/internal/store"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkflow is a mock of Workflow interface.
type MockWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowMockRecorder
}

// MockWorkflowMockRecorder is the mock recorder for MockWorkflow.
type MockWorkflowMockRecorder struct {
	mock *MockWorkflow
}

// NewMockWorkflow creates a new mock instance.
func NewMockWorkflow(ctrl *gomock.Controller) *MockWorkflow {
	mock := &MockWorkflow{ctrl: ctrl}
	mock.recorder = &MockWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflow) EXPECT() *MockWorkflowMockRecorder {
	return m.recorder
}

// Complete mocks base method.
func (m *MockWorkflow) Complete(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockWorkflowMockRecorder) Complete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockWorkflow)(nil).Complete), arg0, arg1, arg2)
}

// IsComplete mocks base method.
func (m *MockWorkflow) IsComplete(arg0 context.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsComplete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsComplete indicates an expected call of IsComplete.
func (mr *MockWorkflowMockRecorder) IsComplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsComplete", reflect.TypeOf((*MockWorkflow)(nil).IsComplete), arg0, arg1)
}

// StartExecution mocks base method.
func (m *MockWorkflow) StartExecution(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecution", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartExecution indicates an expected call of StartExecution.
func (mr *MockWorkflowMockRecorder) StartExecution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockWorkflow)(nil).StartExecution), arg0, arg1)
}

// UpdateWorkflow mocks base method.
func (m *MockWorkflow) UpdateWorkflow(arg0 context.Context, arg1 *store.Workflow) (*store.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*store.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockWorkflowMockRecorder) UpdateWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockWorkflow)(nil).UpdateWorkflow), arg0, arg1)
}
